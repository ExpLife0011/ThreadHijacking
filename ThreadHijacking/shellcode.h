#pragma once

BYTE shellcode[]{
	0x9c, //save flags
	0x50, //save rax 
	0x53, //save rbx
	0x51, //save rcx
	0x52, //save rdx 
	0x55, //save rbp [5]
	0x41, 0x50, //save r8 register [6][7]
	0x41, 0x51, //save r9 register [8][9]
	0x41, 0x52, //save r10 register [10][11]
	0x41, 0x53,//save r11 register [12][13]
	0x48, 0x89, 0xE5, //save stack in rbp [14][15][16]
	0x48, 0x83, 0xE4, 0xF0, //fix stack alignment 17 18 19 20
	0x48, 0x83, 0xEC, 0x08, //allocate space in stack 21 22 23 24
	0xC7, 0x04, 0x24, 0xCC, 0xCC, 0xCC, 0xCC, //first half of qword 25 26 27 28 29 30 31
	0xC7, 0x44, 0x24, 0x04, 0xCC, 0xCC, 0xCC, 0xCC, //second half of qword 32 33 34 35 36 37 38 39
	0x48, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, //move rax to fxsave address 40 41 42 43 44 45 46 47 48 49
	0x0F, 0xAE, 0x00, //fxsave 50 51 52
	0x48, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, //load dummy bytes into rax (function ptr) 53 54 55 56 57 58 59 60 61 62
	0x48, 0xB9, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, //load dummy bytes into rcx (arg1) 63 64 65 66 67 68 69 70 71 72
	0x48, 0xBA, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, //load dummy bytes into rdx (arg2) 73 74 75 76 77 78 79 80 81 82
	0x49, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, //load dummy bytes into r8 (arg3) 83 84 85 86 87 88 89 90 91 92
	0x49, 0xB9, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, //load dummy bytes into r9 (arg4) 93 94 95 96 97 98 99 100 101 102
	0x48, 0x81, 0xEC, 0x08, 0x02, 0x00, 0x00, //allocate plenty of space, just in case some other functions need it 103 104 105 106 107 108 109
	0xFF, 0xD0, //call rax (function) 110 111
	0x48, 0x81, 0xC4, 0x08, 0x02, 0x00, 0x00, //free allocated space 112 113 114 115 116 117 118
	0x48, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, //move rax to fxsave address 119 120 121 122 123 124 125 126 127 128
	0x0F, 0xAE, 0x08, //fxrstor
	0x48, 0x83, 0xC4, 0x08, //free stack memory
	0x48, 0x89, 0xEC, //load stack
	0x41, 0x5B, //load r11 
	0x41, 0x5A, //load r10 
	0x41, 0x59, //load r9 
	0x41, 0x58, //load r8 
	0x5D, //load rbp
	0x5A, //load rdx
	0x59, //load rcx 
	0x5B, //load rbx
	0x58, // load rax 
	0x9D, //restore flags 
	0xC3 // ret
};